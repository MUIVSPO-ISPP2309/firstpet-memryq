import time
import threading

class Task:
    def __init__(self, description, category="–û–±—â–µ–µ", priority=3, reminder_time=None):
        self.description = description
        self.category = category
        self.priority = priority  # 1 - –í—ã—Å–æ–∫–∏–π, 2 - –°—Ä–µ–¥–Ω–∏–π, 3 - –ù–∏–∑–∫–∏–π
        self.completed = False
        self.reminder_time = reminder_time
        if reminder_time:
            threading.Thread(target=self.set_reminder, daemon=True).start()

    def mark_completed(self):
        self.completed = True

    def set_reminder(self):
        time.sleep(self.reminder_time)
        if not self.completed:
            print(f"\nüîî‚åöÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {self.description} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.category})")

    def __str__(self):
        status = "‚úÖ" if self.completed else "‚ùå"
        priority_map = {1: "üî¥ –í—ã—Å–æ–∫–∏–π", 2: "üü† –°—Ä–µ–¥–Ω–∏–π", 3: "üü¢ –ù–∏–∑–∫–∏–π"}
        return f"{status} [{self.category}] ({priority_map[self.priority]}) {self.description}"


class ToDoList:
    def __init__(self):
        self.tasks = []

    def add_task(self, description, category="–û–±—â–µ–µ", priority=3, reminder_time=None):
        self.tasks.append(Task(description, category, priority, reminder_time))
        print(f"–ó–∞–¥–∞—á–∞ '{description}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority}.")

    def mark_completed(self, index):
        if 0 <= index < len(self.tasks):
            self.tasks[index].mark_completed()
            print(f"–ó–∞–¥–∞—á–∞ '{self.tasks[index].description}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        else:
            print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏.")

    def show_tasks(self, show_completed=None, category=None):
        filtered_tasks = [
            (i, task)
            for i, task in enumerate(self.tasks)
            if (show_completed is None or task.completed == show_completed)
            and (category is None or task.category.lower() == category.lower())
        ]

        if not filtered_tasks:
            print("–ù–µ—Ç –∑–∞–¥–∞—á.")
        else:
            for i, task in sorted(filtered_tasks, key=lambda t: t[1].priority):
                print(f"{i}. {task}")

    def run(self):
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
            print("2. –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
            print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
            print("4. –í—ã–π—Ç–∏")

            command = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ").strip()

            if command == "1":
                desc = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: ").strip()
                
                print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
                print("1. üíº –†–∞–±–æ—Ç–∞")
                print("2. üëÄ –õ–∏—á–Ω—ã–µ –¥–µ–ª–∞")
                print("3. üòÅ –î—Ä—É–≥–æ–µ")
                category_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ").strip()
                category_map = {"1": "–†–∞–±–æ—Ç–∞", "2": "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", "3": "–î—Ä—É–≥–æ–µ"}
                category = category_map.get(category_choice, "–î—Ä—É–≥–æ–µ")

                print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:")
                print("1. üî¥ –í—ã—Å–æ–∫–∏–π")
                print("2. üü† –°—Ä–µ–¥–Ω–∏–π")
                print("3. üü¢ –ù–∏–∑–∫–∏–π")
                priority_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: ").strip()
                try:
                    priority = int(priority_choice)
                    if priority not in [1, 2, 3]:
                        raise ValueError
                except ValueError:
                    print("–û—à–∏–±–∫–∞: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1, 2 –∏–ª–∏ 3.")
                    continue

                print("–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")
                print("1. ‚úÖ –î–∞")
                print("2. ‚ùå –ù–µ—Ç")
                reminder_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
                reminder_time = None
                if reminder_choice == "1":
                    try:
                        reminder_time = int(input("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ (—Å–µ–∫—É–Ω–¥—ã): ").strip())
                    except ValueError:
                        print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                        continue

                self.add_task(desc, category, priority, reminder_time)

            elif command == "2":
                try:
                    index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏: "))
                    self.mark_completed(index)
                except ValueError:
                    print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

            elif command == "3":
                print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á:")
                print("1. –í—Å–µ –∑–∞–¥–∞—á–∏")
                print("2. –¢–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
                print("3. –¢–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")
                print("4. –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

                filter_option = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞: ").strip()

                if filter_option == "2":
                    self.show_tasks(True)
                elif filter_option == "3":
                    self.show_tasks(False)
                elif filter_option == "4":
                    print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
                    print("1. üíº –†–∞–±–æ—Ç–∞")
                    print("2. üëÄ –õ–∏—á–Ω—ã–µ –¥–µ–ª–∞")
                    print("3. üòÅ –î—Ä—É–≥–æ–µ")
                    category_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ").strip()
                    category_map = {"1": "–†–∞–±–æ—Ç–∞", "2": "–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", "3": "–î—Ä—É–≥–æ–µ"}
                    category = category_map.get(category_choice, None)
                    self.show_tasks(category=category)
                else:
                    self.show_tasks()

            elif command == "4":
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                break

            else:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")

if __name__ == "__main__":
    ToDoList().run()
